From 3d33ddb6c6c14eca503e26335bd4da18f7b23caf Mon Sep 17 00:00:00 2001
From: Heppokoyuki <yuhki.yasuda@gmail.com>
Date: Fri, 22 Jun 2018 20:05:48 +0900
Subject: [PATCH 2/3] window!!

---
 HariboteOS.img | Bin 1474560 -> 1474560 bytes
 bootpack.c     |  82 +++++++++++++++++++++++++++++++++++++++++--------
 haribote.h     |   9 +++---
 sheet.c        |  22 ++++++++-----
 4 files changed, 88 insertions(+), 25 deletions(-)

diff --git a/HariboteOS.img b/HariboteOS.img
index f9fe483437bd16784a2b8e7503bfc64e28616d31..cd958eddb792a65148ac95f7aca0f8abe6002a3d 100644
GIT binary patch
delta 3687
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
Y6a^We7SKx2Do_lx`po{J`(CR5A9%*oBLDyZ

delta 2557
zcmb7Ge{2(V6#rg#TW{mGURjX=jTVARqWl;pk_jXy?&6Sv-Il6A7@7&5H3nm>j<C|1
zvugdOOXtO8z+akZqKOhM(P(1m#zG;GFq4Jsk0n+E@jEv||7Zfr=K0?D+h3q02zkA`
z_dehE<MZCT+u-1y!NEPL2jxR+UVZfIhZZDP-buH*E_sLZ?hk!ys-GTc(zYDC+<Cc^
z5WKp`&_<3->#pX8Z?<ia8sG8~a{WGn|7Nt|Uz+XU6Lm4!MM&0|%X{#`;4EQXDj{rJ
z6a4&GONccmC*%EpJ5DehF#El&ge?WEHLh{PjRi26gW%Fkq3tFd<2J?o6O`eV>;(Ei
zv|?UE*vIh0-W5u=eust;)TEIKvSGXzNXKzbn}q0ubu8w}gmDF6PK2>oa}gz*Bv(&N
z0;f>_t<Mg$FK;;R<7W0nt=-<fs(abe;_)0mo?})?F<n%=UQ$d^V~*;w=kx^J9He^P
zi09-Oq#Z=>Z{Ab%Gim?azWn7$Co;`G;3os%C)^j-!dfz(L7JS%6gwnLMMuIV_#Oey
zx&biB3T0NpeZ_NZS3QprCSfRO+KJ@Y&1Lo_V`I#T<ef+X{G#rMWgG>b%CH5I9IB)u
z>UW_MCruq%lZ=mGcI-PpKQD@fgp}k*Xy^{RF)&YVyMhob3`@_(U~Zr<qpTq@MvW_@
z%-0<>w^zA5aA%i+qRZ=U?y?d!ydhXs=uitcvniNH2rK67l|~*n(RT(_e7trGl{6L4
zMBMBopl2_Z@mqv3p7Fe6!;qErr(m8T|AaBYj&T376PYlduPWfv750%Q{jo`Qz6POz
zN}3gNv|=SoMI}I7IDlO*cj1)i`OHcf-g3gjA~xn!U#+jN<TN1>LXC<0or64SCCHcI
zu}U#NL3?QE95u#)_r9vMr<U`=sBzKCN%71Z?z8b@fbHZ8mr$I*-g1R36vyqu9rt!k
zva?9Vok|VxIq=nS2rtzff$X5#Kyfs`;sXXujY~#>8t3e*9jjv&^RyX-fyNSl3`hr~
z*d}hw4>VPt!3u+ovuz%#D(k$M@RAdlYESrS9F}ksPwNjL>_0Q#RT<&Ue7|6X709`I
z(x#U1!?&!IUo6W^E4<7Orpo{AOFJ$|Bz>ZDhb$5Mx8RE|U9)#~t;0){U(#Q84M{Fq
zXK(HCyS}fp_rm3qy7b|mp&H4XR-U~e!DaHfJ+;zmdwuT`smC^YAKtx!8hIKjSYs<k
zf31}!tc;okZXqqBAiW(eIB<J(dR9sS?EINf;;J>LWsP}6%yv*ip`rPzqm;lZtfj{M
zXs*`&tM?J<q`hu`TTG>T3$TlDU9~b&o1q<5%TEbIv!a?4b!QC?rqZE?N<&&A*a9Ip
z8=7b6I;IoVNI#5D9(p+2N{vD?2tdUelc^7KQ|QiuH7X~3@8dm|BU3pAH{iyyukBZ2
zS}e;=TJkBGhEzb#_M$>p+l+j){T9y>81Bk5a8&Y97#J6~BC$je3RG!O!(UxV#{4e+
z%(c3lRK=q(tFWOxUHC3m*m|)EGxdBCIRVK9PC)*40{%~$(5nKFIq)wMOp!Ixx(R9R
z;1vl5IkP2NfpIk1TVH62Y0*(U7OIe0svRM>*M7I9uM(@2O3{7ueAb@n;q0}<GyRX3
z*z_m;u2_l6mMR{75_}I-`Wi5-N%<;9FCu&6fmAAa;KttGePW1VxS%g8e<Q#RE<b8;
z?s$trzC^Ki7=1SnsKAi$ATin@16R^Hh=N_imj?E(Pedw#iy0wSD`S05L__SRQdY&S
z0_V6U5Ud$LosJWM@14Rvn}_%JIF3nHhYuSeDZn@48tO<nNf^2G+CFbh`remxuQkyB
z-ax+u;sU7wkwI!f>OkBe3P?Rj1IQu}6{HcQ3B&`Ufp|d{gEWKqK$gHCZJ#gt2bU`^
A#sB~S

diff --git a/bootpack.c b/bootpack.c
index 3f0cb47..82133fe 100644
--- a/bootpack.c
+++ b/bootpack.c
@@ -3,13 +3,15 @@
 extern struct FIFO8 keyfifo;
 extern struct FIFO8 mousefifo;
 
+void make_window8(unsigned char *buf, int xsize, int ysize, char *title);
+
 void HariMain(void)
 {
     struct BOOTINFO *binfo = (struct BOOTINFO *) ADR_BOOTINFO;
     struct MOUSE_DEC mdec;
     struct SHTCTL *shtctl;
-    struct SHEET *sht_back, *sht_mouse;
-    unsigned char *buf_back, buf_mouse[256];
+    struct SHEET *sht_back, *sht_mouse, *sht_win;
+    unsigned char *buf_back, buf_mouse[256], *buf_win;
     char *mcursor, s[40], keybuf[32], mousebuf[128];
     unsigned int memtotal;
     struct MEMMAN *memman = (struct MEMMAN *) MEMMAN_ADDR;
@@ -35,23 +37,31 @@ void HariMain(void)
     shtctl = shtctl_init(memman, binfo->vram, binfo->scrnx, binfo->scrny);
     sht_back = sheet_alloc(shtctl);
     sht_mouse = sheet_alloc(shtctl);
+    sht_win = sheet_alloc(shtctl);
     buf_back = (unsigned char *) memman_alloc_4k(memman, binfo->scrnx * binfo->scrny);
+    buf_win = (unsigned char *) memman_alloc_4k(memman, 160 * 68);
     sheet_setbuf(sht_back, buf_back, binfo->scrnx, binfo->scrny, -1);
     sheet_setbuf(sht_mouse, buf_mouse, 16, 16, 99);
+    sheet_setbuf(sht_win, buf_win, 160, 68, -1);
     init_screen8(buf_back, binfo->scrnx, binfo->scrny);
     init_mouse_cursor8(buf_mouse, 99);
-    sheet_slide(shtctl, sht_back, 0, 0);
+    make_window8(buf_win, 160, 68, "window");
+    putfonts8_asc(buf_win, 160, 24, 28, COL8_000000, "Welcome to");
+    putfonts8_asc(buf_win, 160, 24, 44, COL8_000000, "hogehogehog");
+    sheet_slide(sht_back, 0, 0);
     mx = (binfo->scrnx - 16) / 2;
     my = (binfo->scrny - 28 - 16) / 2;
-    sheet_slide(shtctl, sht_mouse, mx, my);
-    sheet_updown(shtctl, sht_back, 0);
-    sheet_updown(shtctl, sht_mouse, 1);
+    sheet_slide(sht_mouse, mx, my);
+    sheet_slide(sht_win, 80, 72);
+    sheet_updown(sht_back, 0);
+    sheet_updown(sht_win, 1);
+    sheet_updown(sht_mouse, 2);
     sprintf(s, "(%d, %d)", mx, my);
     putfonts8_asc(buf_back, binfo->scrnx, 0, 0, COL8_FFFFFF, s);
 
     sprintf(s, "memory:%dMB  free:%dKB", memtotal / (1024 * 1024), memman_total(memman) / 1024);
     putfonts8_asc(buf_back, binfo->scrnx, 0, 32, COL8_FFFFFF, s);
-    sheet_refresh(shtctl, sht_back, 0, 0, binfo->scrnx, 48);
+    sheet_refresh(sht_back, 0, 0, binfo->scrnx, 48);
 
     for(;;) {
         _io_cli();
@@ -65,7 +75,7 @@ void HariMain(void)
                 sprintf(s, "%x", i);
                 boxfill8(buf_back, binfo->scrnx, COL8_008484, 0, 16, 15, 31);
                 putfonts8_asc(buf_back, binfo->scrnx, 0, 16, COL8_FFFFFF, s);
-                sheet_refresh(shtctl, sht_back, 0, 16, 16, 32);
+                sheet_refresh(sht_back, 0, 16, 16, 32);
             }
             else if(fifo8_status(&mousefifo) != 0) {
                 i = fifo8_get(&mousefifo);
@@ -83,20 +93,66 @@ void HariMain(void)
                     }
                     boxfill8(buf_back, binfo->scrnx, COL8_008484, 32, 16, 32 + 15 * 8 - 1, 31);
                     putfonts8_asc(buf_back, binfo->scrnx, 32, 16, COL8_FFFFFF, s);
-                    sheet_refresh(shtctl, sht_back, 32, 16, 32 + 15 * 8, 32);
+                    sheet_refresh(sht_back, 32, 16, 32 + 15 * 8, 32);
                     mx += mdec.x;
                     my += mdec.y;
                     if(mx < 0) mx = 0;
                     if(my < 0) my = 0;
-                    if(mx > binfo->scrnx - 16) mx = binfo->scrnx - 16;
-                    if(my > binfo->scrny - 16) my = binfo->scrny - 16;
+                    if(mx > binfo->scrnx - 1) mx = binfo->scrnx - 1;
+                    if(my > binfo->scrny - 1) my = binfo->scrny - 1;
                     sprintf(s, "(%d %d)", mx, my);
                     boxfill8(buf_back, binfo->scrnx, COL8_008484, 0, 0, 79, 15);
                     putfonts8_asc(buf_back, binfo->scrnx, 0, 0, COL8_FFFFFF, s);
-                    sheet_refresh(shtctl, sht_back, 0, 0, 80, 16);
-                    sheet_slide(shtctl, sht_mouse, mx, my);
+                    sheet_refresh(sht_back, 0, 0, 80, 16);
+                    sheet_slide(sht_mouse, mx, my);
                 }
             }
         }
     }
 }
+
+void make_window8(unsigned char *buf, int xsize, int ysize, char *title)
+{
+    static char closebtn[14][16] = {
+        "OOOOOOOOOOOOOOO@",
+        "OQQQQQQQQQQQQQ$@",
+        "OQQQQQQQQQQQQQ$@",
+        "OQQQ@@QQQQ@@QQ$@",
+        "OQQQQ@@QQ@@QQQ$@",
+        "OQQQQQ@@@@QQQQ$@",
+        "OQQQQQQ@@QQQQQ$@",
+        "OQQQQQ@@@@QQQQ$@",
+        "OQQQQ@@QQ@@QQQ$@",
+        "OQQQ@@QQQQ@@QQ$@",
+        "OQQQQQQQQQQQQQ$@",
+        "OQQQQQQQQQQQQQ$@",
+        "O$$$$$$$$$$$$$$@",
+        "@@@@@@@@@@@@@@@@"
+    };
+
+    int x, y;
+    char c;
+
+    boxfill8(buf, xsize, COL8_C6C6C6, 0, 0, xsize - 1, 0);
+    boxfill8(buf, xsize, COL8_FFFFFF, 1, 1, xsize - 2, 1);
+    boxfill8(buf, xsize, COL8_C6C6C6, 0, 0, 0, ysize - 1);
+    boxfill8(buf, xsize, COL8_FFFFFF, 1, 1, 1, ysize - 2);
+    boxfill8(buf, xsize, COL8_848484, xsize - 2, 1, xsize - 2, ysize - 2);
+    boxfill8(buf, xsize, COL8_000000, xsize - 1, 0, xsize - 1, ysize - 1);
+    boxfill8(buf, xsize, COL8_C6C6C6, 2, 2, xsize - 3, ysize - 3);
+    boxfill8(buf, xsize, COL8_000084, 3, 3, xsize - 4, 20);
+    boxfill8(buf, xsize, COL8_848484, 1, ysize - 2, xsize - 2, ysize - 2);
+    boxfill8(buf, xsize, COL8_000000, 0, ysize - 1, xsize - 1, ysize - 1);
+    putfonts8_asc(buf, xsize, 24, 4, COL8_FFFFFF, title);
+    for(y = 0; y < 14; y++) {
+        for(x = 0; x < 16; x++) {
+            c = closebtn[y][x];
+            if(c == '@') c = COL8_000000;
+            else if(c == '$') c = COL8_848484;
+            else if(c == 'Q') c = COL8_C6C6C6;
+            else c = COL8_FFFFFF;
+            buf[(5 + y) * xsize + (xsize - 21)] = c;
+        }
+    }
+    return;
+}
diff --git a/haribote.h b/haribote.h
index e1c44e9..80862cb 100644
--- a/haribote.h
+++ b/haribote.h
@@ -100,6 +100,7 @@ struct MEMMAN {
 struct SHEET {
     unsigned char *buf;
     int bxsize, bysize, vx0, vy0, col_inv, height, flags;
+    struct SHTCTL *ctl;
 };
 struct SHTCTL {
     unsigned char *vram;
@@ -174,10 +175,10 @@ int memman_free_4k(struct MEMMAN *man, unsigned int addr, unsigned int size);
 struct SHTCTL *shtctl_init(struct MEMMAN *memman, unsigned char *vram, int xsize, int ysize);
 struct SHEET *sheet_alloc(struct SHTCTL *ctl);
 void sheet_setbuf(struct SHEET *sht, unsigned char *buf, int xsize, int ysize, int col_inv);
-void sheet_updown(struct SHTCTL *ctl, struct SHEET *sht, int height);
-void sheet_refresh(struct SHTCTL *ctl, struct SHEET *sht, int bx0, int by0, int bx1, int by1);
-void sheet_slide(struct SHTCTL *ctl, struct SHEET *sht, int vx0, int vy0);
-void sheet_free(struct SHTCTL *ctl, struct SHEET *sht);
+void sheet_updown(struct SHEET *sht, int height);
+void sheet_refresh(struct SHEET *sht, int bx0, int by0, int bx1, int by1);
+void sheet_slide(struct SHEET *sht, int vx0, int vy0);
+void sheet_free(struct SHEET *sht);
 void sheet_refreshsub(struct SHTCTL *ctl, int vx0, int vy0, int vx1, int vy1);
 
 /*** sprintf.c ***/
diff --git a/sheet.c b/sheet.c
index 3ff4c9a..e57d269 100644
--- a/sheet.c
+++ b/sheet.c
@@ -16,6 +16,7 @@ struct SHTCTL *shtctl_init(struct MEMMAN *memman, unsigned char *vram, int xsize
     ctl->top = -1;
     for(i = 0; i < MAX_SHEETS; i++) {
         ctl->sheets0[i].flags = 0;
+        ctl->sheets0[i].ctl = ctl;
     }
 err:
     return ctl;
@@ -45,8 +46,9 @@ void sheet_setbuf(struct SHEET *sht, unsigned char *buf, int xsize, int ysize, i
     return;
 }
 
-void sheet_updown(struct SHTCTL *ctl, struct SHEET *sht, int height)
+void sheet_updown(struct SHEET *sht, int height)
 {
+    struct SHTCTL *ctl = sht->ctl;
     int h, old = sht->height;
 
     if(height > ctl->top + 1) {
@@ -94,30 +96,30 @@ void sheet_updown(struct SHTCTL *ctl, struct SHEET *sht, int height)
     return;
 }
 
-void sheet_refresh(struct SHTCTL *ctl, struct SHEET *sht, int bx0, int by0, int bx1, int by1)
+void sheet_refresh(struct SHEET *sht, int bx0, int by0, int bx1, int by1)
 {
     if(sht->height >= 0) {
-        sheet_refreshsub(ctl, sht->vx0 + bx0, sht->vy0 + by0, sht->vx0 + bx1, sht->vy0 + by1);
+        sheet_refreshsub(sht->ctl, sht->vx0 + bx0, sht->vy0 + by0, sht->vx0 + bx1, sht->vy0 + by1);
     }
     return;
 }
 
-void sheet_slide(struct SHTCTL *ctl, struct SHEET *sht, int vx0, int vy0)
+void sheet_slide(struct SHEET *sht, int vx0, int vy0)
 {
     int old_vx0 = sht->vx0, old_vy0 = sht->vy0;
     sht->vx0 = vx0;
     sht->vy0 = vy0;
     if(sht->height >= 0) {
-        sheet_refreshsub(ctl, old_vx0, old_vy0, old_vx0 + sht->bxsize, old_vy0 + sht->bysize);
-        sheet_refreshsub(ctl, vx0, vy0, vx0 + sht->bxsize, vy0 + sht->bysize);
+        sheet_refreshsub(sht->ctl, old_vx0, old_vy0, old_vx0 + sht->bxsize, old_vy0 + sht->bysize);
+        sheet_refreshsub(sht->ctl, vx0, vy0, vx0 + sht->bxsize, vy0 + sht->bysize);
     }
     return;
 }
 
-void sheet_free(struct SHTCTL *ctl, struct SHEET *sht)
+void sheet_free(struct SHEET *sht)
 {
     if(sht->height >= 0) {
-        sheet_updown(ctl, sht, -1);
+        sheet_updown(sht, -1);
     }
     sht->flags = 0;
     return;
@@ -128,6 +130,10 @@ void sheet_refreshsub(struct SHTCTL *ctl, int vx0, int vy0, int vx1, int vy1)
     int h, bx, by, vx, vy, bx0, by0, bx1, by1;
     unsigned char *buf, c, *vram = ctl->vram;
     struct SHEET *sht;
+    if(vx0 < 0) vx0 = 0;
+    if(vy0 < 0) vy0 = 0;
+    if(vx1 > ctl->xsize) vx1 = ctl->xsize;
+    if(vy1 > ctl->ysize) vy1 = ctl->ysize;
     for(h = 0; h <= ctl->top; h++) {
         sht = ctl->sheets[h];
         buf = sht->buf;
-- 
2.17.1

